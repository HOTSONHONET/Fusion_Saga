# -*- coding: utf-8 -*-
"""GEI_extract.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13hMfp0jPQPvso5xBZQM7cZnQaWRhtYPN
"""

import tensorflow
import keras
#from keras import layers
from keras.layers import Input, Dense, Activation, ZeroPadding2D, BatchNormalization, Flatten, Conv2D
from keras.layers import AveragePooling2D, MaxPooling2D, Dropout, GlobalMaxPooling2D, GlobalAveragePooling2D
from keras.models import Model as model
from keras.models import Sequential
from keras.preprocessing import image
from keras.utils import layer_utils
from keras.utils.data_utils import get_file
from keras.applications.imagenet_utils import preprocess_input

import os
import numpy as np
import matplotlib.pyplot as plt
from imageio import imread
!pip install Pillow
from PIL import Image

from skimage.transform import resize

files = os.listdir('/content/drive/MyDrive/train/A/')
images = [imread('/content/drive/MyDrive/train/A/fyc-90_1/'+f) for f in files]
print(len(images))

plt.imshow(images[1])

def mass_center(img,is_round=True):
    Y = img.mean(axis=1)
    X = img.mean(axis=0)
    Y_ = np.sum(np.arange(Y.shape[0]) * Y)/np.sum(Y)
    X_ = np.sum(np.arange(X.shape[0]) * X)/np.sum(X)
    if is_round:
        return int(round(X_)),int(round(Y_))
    return X_,Y_

def image_extract(img,newsize):
    x_s = np.where(img.mean(axis=0)!=0)[0].min()
    x_e = np.where(img.mean(axis=0)!=0)[0].max()
    
    y_s = np.where(img.mean(axis=1)!=0)[0].min()
    y_e = np.where(img.mean(axis=1)!=0)[0].max()
    
    x_c,_ = mass_center(img)
    x_s = x_c-newsize[1]//2
    x_e = x_c+newsize[1]//2
    img = img[y_s:y_e,x_s if x_s>0 else 0:x_e if x_e<img.shape[1] else img.shape[1]]
    im = np.array(Image.fromarray(img).resize(newsize))
    return im

images = [image_extract(i,(128,64)) for i in images]
plt.figure()
for i in range(10):
    plt.subplot(2,5,i+1)
    plt.imshow(images[i])
plt.show()

gei = np.mean(images,axis=0)
plt.figure(figsize=(6,10))
plt.imshow(gei)
plt.show()